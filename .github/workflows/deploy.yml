name: Full Deploy to ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ソースコード取得
      - name: Checkout source
        uses: actions/checkout@v3

      # Java 21 をセット
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Maven で jar ビルド
      - name: Build backend jar
        run: |
          cd back
          mvn clean package -DskipTests
          cd ..

      # ECS 名などを設定
      - name: Set ECS names from repo
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=${REPO_NAME}-cluster" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=${REPO_NAME}-service" >> $GITHUB_ENV
          echo "ECS_TASK_FAMILY=${REPO_NAME}-task" >> $GITHUB_ENV
          echo "ECS_CONTAINER_NAME=${REPO_NAME}-container" >> $GITHUB_ENV

      # AWS 認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ECR にログイン
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # ECR リポジトリ作成（存在しなければ）
      - name: Ensure ECR repository exists
        run: |
          set +e
          aws ecr describe-repositories --repository-names $REPO_NAME
          if [ $? -ne 0 ]; then
            echo "ECR repository $REPO_NAME not found. Creating..."
            aws ecr create-repository --repository-name $REPO_NAME
          else
            echo "ECR repository $REPO_NAME already exists."
          fi

      # Docker イメージビルド & プッシュ
      - name: Build, tag, and push Docker image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO_NAME:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI ./back
          docker push $IMAGE_URI

      # ECS タスク定義登録
      - name: Register new ECS task definition
        run: |
          cat > task-def.json <<EOF
{
  "family": "$ECS_TASK_FAMILY",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "256",
  "memory": "512",
  "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
  "containerDefinitions": [
    {
      "name": "$ECS_CONTAINER_NAME",
      "image": "$IMAGE_URI",
      "essential": true,
      "portMappings": [
        { "containerPort": 8080, "protocol": "tcp" }
      ],
      "environment": [
        { "name": "SPRING_DATASOURCE_URL", "value": "jdbc:mysql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" },
        { "name": "SPRING_DATASOURCE_USERNAME", "value": "${{ secrets.DB_USER }}" },
        { "name": "SPRING_DATASOURCE_PASSWORD", "value": "${{ secrets.DB_PASS }}" }
      ]
    }
  ]
}
EOF

          aws ecs register-task-definition --cli-input-json file://task-def.json

      # ECS サービス作成 or 更新
      - name: Create or update ECS service
        run: |
          set +e
          aws ecs describe-services \
            --cluster $ECS_CLUSTER_NAME \
            --services $ECS_SERVICE_NAME >/dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Service not found. Creating..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER_NAME \
              --service-name $ECS_SERVICE_NAME \
              --task-definition $ECS_TASK_FAMILY \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUPS }}],assignPublicIp=ENABLED}"
          else
            echo "Service exists. Updating..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER_NAME \
              --service $ECS_SERVICE_NAME \
              --task-definition $ECS_TASK_FAMILY \
              --force-new-deployment
