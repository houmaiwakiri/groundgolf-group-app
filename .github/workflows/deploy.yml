name: Full Deploy to ECS

on:
  push:
    # deployブランチへのpushをトリガーにする
    branches: [ "deploy" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ソースコード取得
      - name: Checkout source
        uses: actions/checkout@v3

      # Java21
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Mavenでjarビルド
      - name: Build backend jar
        run: |
          cd back
          mvn clean package -DskipTests
          cd ..

      # ECS設定
      - name: Set ECS names from repo
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=${REPO_NAME}-cluster" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=${REPO_NAME}-service" >> $GITHUB_ENV
          echo "ECS_TASK_FAMILY=${REPO_NAME}-task" >> $GITHUB_ENV
          echo "ECS_CONTAINER_NAME=${REPO_NAME}-container" >> $GITHUB_ENV

      # AWS認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      # ECRリポジトリがない場合作成
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $REPO_NAME >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name $REPO_NAME

      # Dockerイメージビルド&プッシュ
      - name: Build, tag, and push Docker image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO_NAME:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI ./back
          docker push $IMAGE_URI

      # ECSタスク定義登録
      # ロググループが作成されない場合は、GUIから作成しておく。/ecs/groundgolf-group-app-task
      - name: Register new ECS task definition
        run: |
          jq -n \
            --arg family "$ECS_TASK_FAMILY" \
            --arg container "$ECS_CONTAINER_NAME" \
            --arg image "$IMAGE_URI" \
            --arg url "jdbc:mysql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?useSSL=false&serverTimezone=Asia/Tokyo&allowPublicKeyRetrieval=true" \
            --arg user "${{ secrets.DB_USER }}" \
            --arg pass "${{ secrets.DB_PASS }}" \
            --arg region "${{ secrets.AWS_REGION }}" \
            '{
              family: $family,
              networkMode: "awsvpc",
              requiresCompatibilities: ["FARGATE"],
              cpu: "256",
              memory: "512",
              executionRoleArn: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
              containerDefinitions: [
                {
                  name: $container,
                  image: $image,
                  essential: true,
                  portMappings: [{containerPort: 8080, protocol: "tcp"}],
                  environment: [
                    {name: "SPRING_DATASOURCE_URL", value: $url},
                    {name: "SPRING_DATASOURCE_USERNAME", value: $user},
                    {name: "SPRING_DATASOURCE_PASSWORD", value: $pass}
                  ],
                  logConfiguration: {
                    logDriver: "awslogs",
                    options: {
                      "awslogs-group": "/ecs/\($family)",
                      "awslogs-region": $region,
                      "awslogs-stream-prefix": "ecs"
                    }
                  }
                }
              ]
            }' > task-def.json

          echo "---- Task Definition ----"
          cat task-def.json
          echo "-------------------------"

          aws ecs register-task-definition --cli-input-json file://task-def.json

      # ECSクラスター作成
      - name: Create ECS cluster if not exists
        run: |
          set -e
          echo "Checking ECS cluster: $ECS_CLUSTER_NAME"
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters $ECS_CLUSTER_NAME --query 'clusters[0].status' --output text 2>/dev/null || true)
          if [[ "$CLUSTER_STATUS" != "ACTIVE" ]]; then
            echo "Cluster not found. Creating..."
            aws ecs create-cluster --cluster-name $ECS_CLUSTER_NAME
            echo "Cluster created: $ECS_CLUSTER_NAME"
          else
            echo "Cluster already exists ($CLUSTER_STATUS)"
          fi

      # ECSサービス作成
      - name: Create or update ECS service
        run: |
          set -e
          echo "Checking ECS service: $ECS_SERVICE_NAME"

          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER_NAME \
            --services $ECS_SERVICE_NAME \
            --query 'services[0].status' \
            --output text 2>/dev/null || true)

          if [[ "$SERVICE_STATUS" == "None" || -z "$SERVICE_STATUS" || "$SERVICE_STATUS" == "MISSING" ]]; then
            echo "Service not found. Creating new service..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER_NAME \
              --service-name $ECS_SERVICE_NAME \
              --task-definition $ECS_TASK_FAMILY \
              --desired-count 1 \
              --launch-type FARGATE \
              --deployment-configuration "deploymentCircuitBreaker={enable=true,rollback=true},maximumPercent=100,minimumHealthyPercent=0"

              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUPS }}],assignPublicIp=ENABLED}"
            echo "Service created: $ECS_SERVICE_NAME"
          else
            echo "Service exists ($SERVICE_STATUS). Updating..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER_NAME \
              --service $ECS_SERVICE_NAME \
              --task-definition $ECS_TASK_FAMILY \
              --force-new-deployment
            echo "Service updated: $ECS_SERVICE_NAME"
          fi
